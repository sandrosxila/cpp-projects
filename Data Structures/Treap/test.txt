//    node *ROOT = new node(584, 77);
//    ROOT->left = new node(129, 64);
//    ROOT->left->right = new node(529, 50);
//    ROOT->left->right->left = new node(312, 43);
//    ROOT->left->right->left->left = new node(209, 33);
//    ROOT->left->right->left->left->left = new node(150, 21);
//    ROOT->left->right->left->right = new node(471, 31);
//    ROOT->left->right->left->right->left = new node(414, 29);
//    ROOT->left->right->left->right->left->left = new node(369, 12);
//    ROOT->left->right->left->right->left->right = new node(421, 9);
//    ROOT->left->right->left->right->right = new node(502, 24);
//    ROOT->right = new node(619, 62);
//    ROOT->right->right = new node(842, 53);
//    ROOT->right->right->left = new node(824, 41);
//    ROOT->right->right->left->left = new node(736, 39);
//    ROOT->right->right->left->left->left = new node(721, 23);
//    ROOT->right->right->right = new node(943, 45);
//    ROOT->right->right->right->left = new node(853, 37);
//    ROOT->right->right->right->left->right = new node(909, 25);
//    ROOT->right->right->right->right = new node(998, 36);
//
//    split(420, ROOT, LEFT, RIGHT);
//    cout << LEFT << endl;
//    cout << RIGHT << endl;
//    ROOT= nullptr;
//    ROOT = merge(LEFT,RIGHT);
//    cout<<ROOT<<endl;
//
//    LEFT=new node(31,159);
//    LEFT->left=new node(29,139);
//    LEFT->left->left=new node(9,110);
//    LEFT->left->left->left=new node(1,89);
//    LEFT->left->left->left->right=new node(7,49);
//    LEFT->left->left->left->right->left=new node(3,11);
//    LEFT->left->left->right=new node(28,99);
//    LEFT->left->left->right->left=new node(16,55);
//    LEFT->left->left->right->left->left=new node(14,24);
//    LEFT->left->left->right->left->right=new node(22,35);
//    LEFT->right=new node(33,149);
//    LEFT->right->right=new node(36,129);
//    LEFT->right->right->right=new node(44,109);
//    LEFT->right->right->right->left=new node(39,61);
//    LEFT->right->right->right->right=new node(46,77);
//
//    RIGHT = new node(55,157);
//    RIGHT->left = new node(51,148);
//    RIGHT->left->right = new node(52,128);
//    RIGHT->right = new node(68,136);
//    RIGHT->right->left = new node (64,105);
//    RIGHT->right->left->right = new node (66,98);
//    RIGHT->right->right = new node(72,119);
//    RIGHT->right->right->right = new node(88,82);
//    RIGHT->right->right->right->left = new node(77,67);
//    RIGHT->right->right->right->left->right = new node(82,34);
//    RIGHT->right->right->right->left->left = new node(74,25);
//    RIGHT->right->right->right->left->left->right = new node(75,13);
//    RIGHT->right->right->right->right = new node(93,73);
//    RIGHT->right->right->right->right->left = new node(91,42);
//    RIGHT->right->right->right->right->right = new node(99,51);
//
//    cout << LEFT << endl;
//    cout << RIGHT << endl;
//    node* ROOT = merge(LEFT,RIGHT);
//    cout<<ROOT<<endl;